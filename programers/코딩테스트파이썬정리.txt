### 자료형과 내장함수

실수 표현 정확도 한계

```jsx
a = 0.3 + 0.6
if (a == 0.9):
	print(True)
else:
	print(False)

#결과: False이다.

해결방법: round 함수 권장
a = round(0.3 + 0.6, 1)
a == 0.9
```

**str**

- 인덱싱, 슬라이싱 가능
- 특정 인덱스 값 변경 불가

**List**

- 인덱싱, 슬라이싱 가능(순서가 있음)
- 원소 중복 가능
- 특정 인덱스 값 변경 가능
- 원소 추가, 제거 가능

**tuple**

- 생성: (1, 2, 3)
- 인덱싱, 슬라이싱 가능(순서가 있음)
- 원소 중복 가능

**dict**

- ‘key’ : ‘value’의 쌍을 데이터로 갖는 자료형
- 인덱싱, 슬라이싱 가능(순서가 있음)
- 원소 중복 가능

**문자열 내장함수**

```jsx
s = "HapPineSS"

s.lower = happiness
s.upper = HAPPINESS
s.find("s") = 7
s.count("s") = 2
```

리스트 **내장함수**

```python
# 빈 리스트 생성방법
a = [] //빈 리스트에 대입은 불가능하다. 리스트를 적당한 크기로 초기화하거나 append로 추가해야 한다.

# 리스트 생성과 동시에 초기화
arr = list(range(1,11))

a = [1, 2, 3, 4, 5]

# 추가
 맨 뒤에 추가: a.append(6)
 i번 인덱스에 v추가: a.insert(i, v)

# 꺼내기
 마지막 원소 꺼내가: a.pop()
 i번 인덱스 값 꺼내기: a.pop(i)

#제거
 v값을 찾아서 제거: a.remove(v)
 특정 index값 제거: del 키워드 사용
 del a[2] # 2번 index 원소 삭제

#index
 a.index(v): v가 리스트의 몇 번째 index에 있는지 반환

#sort
a = [1, 3, 2, 7, 5]
a.sort() = [1, 2, 3, 5, 7] #오름차순 => 원본을 건드림
sorted(a) <= #원본을 건드리지 않음

a.sort(reverse = True) #내림차순

#clear
 a.clear #빈 리스트로 만들기

// 리스트 활용하기

#len
a = [1, 2, 3, 4]
len(a) = 4

for i in range(len(a)):
	print(a[i])

for x in a
	print(x)

#enumerate
a = [12, 19, 34]
for x in enumerate(a):
	print(x) # (0, 12)\n (1, 19)\n ... (4, 50)\n 튜플로 출력

for i, val in enumerate(a):
  print(i, val) # 0 12\n 1 19\n ... 4 50\n

#all, any
a = [11, 12, 42, 38, 7]
if all(60 > x for x in a):
	print("모든 원소가 60 미만입니다.")

if any (20 > x for in a):
	print("20 미만인 원소가 존재합니다.")

# 2차원 리스트 초기화(세로: N, 가로: M)
	array = [[0] * m for in range(n)]

# 존재여부 조회
	a = [1, 3, 4, 5, 7, 9, 1]
	print(1 in a) = True
	print(a.count(a)) = 2

```

**set**

```python
# add
s = {1, 2, 3}
s.add(4) 결과 -> {1, 2, 3, 4}

#update
s.update([5, 7]) -> {1, 2, 3, 4, 5}

#remove
s.remove(2) -> {1, 3}
```

**리스트 원소 한줄로 입력받기**

```python
# 한줄로 원소 입력받기(숫자)
a = list(map(int, input().split()))

# 한줄로 원소 입력받기(문자)
a = list(input().split())

```

**리스트 중복 제거 & 정렬**

```python
a = [3, 1, 5, 8, 5, 10, 7, 1]

#원리는 set로 바꿨다가 다시 list로 바꾸는 것

result = sorted(list(set(a)))
```

****리스트 전체 합과 평균 구하기****

```python
N = int(input())# 개수
a = list(map(int, input().split()))
total = sum(a)
avg = int(round(total/N, 0)) # 평균을 첫째 자리에서 반올림
```

****리스트 반복문에서 리스트의 원소 여러 번 사용할 때****

```python
score = [80, 83, 95, 87, 93, 71]

for i, val in range(N):
	if val < 90: # score[i] 대신 짧고 편하게 사용 가능
		print("B")
```

****리스트 원소 개수 세기 (딕셔너리 활용)****

```python
s = [1, 3, 4, 2, 3, 4, 1, 3]
cnt = {} # dictionary 생성
for x in s:
  if x in cnt:
    cnt[x] += 1
  else:
    cnt[x] = 1
print(cnt)

# 출력: {1: 2, 3: 3, 4: 2, 2: 1}
```

****딕셔너리 value로 key값 찾기****

```python
for key, value in cnt.items():
	if value == "찾을 value 값":
		print(key, end=' ') # value에 해당하는 key값 출력
```

****리스트를 문자열로 변환하기****

```python
arr = ['H','a','P','p','Y']
print(type(''.join(arr))) # class 'str'
a = ['0','1','3','6']
print(int(''.join(a))) # 136

a = ['0','1','3','6']
b = ['안','녕','하','심','둥']
print(int(''.join(a))) -> 136
print(str(''.join(b))) -> 안녕하심둥
```

두 변수 값 바꾸기